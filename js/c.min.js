(function (d) {
    function q(c) {
        if (!t) return !1;
        h.toggleClass("tbar", c);
        r = c
    }

    const h = d("#main"), e = h.find("#panel"), u = e.find("#img-sel label");
    let v = "";
    const w = d(window).width(), t = 800 >= w;
    let r = !1;
    jQuery.fn.zoomable = function (c) {
        "undefined" === typeof c && (c = {});
        d(this).each(function () {
            const a = this;
            a.zoom = 1;
            a.minZoom = c.minZoom || .2;
            a.maxZoom = c.maxZoom || 10;
            a.zoomStep = c.step || .05;
            a.zoomFn = c.custom || function (b) {
                d(a).css({transform: "scale(" + b + ")"})
            };
            d(a).bind("mousewheel DOMMouseScroll", function (b) {
                b = 0 < b.originalEvent.wheelDelta ||
                0 > b.originalEvent.detail ? 1 : -1;
                a.zoom += a.zoomStep * b;
                a.zoom <= a.minZoom && (a.zoom = a.minZoom);
                a.zoom >= a.maxZoom && (a.zoom = a.maxZoom);
                a.zoomFn.apply(a, [a.zoom, b])
            })
        });
        return d(this)
    };
    jQuery.fn.rotateable = function (c) {
        "undefined" === typeof c && (c = {});
        d(this).each(function () {
            const a = this;
            a.offset = null;
            a.dragging = !1;
            a.started = !1;
            a.$target = c.$target || d(a);

            function rotateByDegrees(degrees) {
                const currentRotation = getCurrentRotation();
                const newRotation = currentRotation + degrees;
                a.$target.css({ transform: "rotate(" + newRotation + "deg)" });
                d(a).css({ transform: "rotate(" + newRotation + "deg)" });
            }

            function getCurrentRotation() {
                const matrix = new WebKitCSSMatrix(window.getComputedStyle(a).transform);
                return Math.round(Math.atan2(matrix.b, matrix.a) * (180 / Math.PI));
            }

            d(a).on("touchstart", function (b) {
                b = b.originalEvent;
                a.offset = { x: b.changedTouches[0].pageX, y: b.changedTouches[0].pageY };
            });

            d(a).on("touchmove", function (b) {
                b.preventDefault();
                b = b.originalEvent;
                rotateByDegrees(b.changedTouches[0].pageY - a.offset.y);
            }).on("mousedown", function (b) {
                a.dragging = !0;
                a.started = !0;
                a.offset = { x: b.pageX, y: b.pageY };
            });

            d(document).on("mouseup", function () {
                a.dragging = !1;
            }).on("mousemove", function (b) {
                if (a.started && a.dragging) {
                    rotateByDegrees(b.pageY - a.offset.y);
                    a.offset = { x: b.pageX, y: b.pageY };
                }
            });

            // Add event listener for arrow keys outside of the icon
            d(document).on("keydown", function (e) {
                if (!a.dragging) {
                    switch (e.keyCode) {
                        case 37: // Left arrow key
                            rotateByDegrees(-1);
                            break;
                        case 39: // Right arrow key
                            rotateByDegrees(1);
                            break;
                    }
                }
            });
        });
    };


    const f = {
        rulesCnt: 0, add: function (c, a) {
            const b = d('<div id="_r' + f.rulesCnt + '" class="rule t' + c + '"></div>');
            let k = !1, x = null, l = !1, y = null;
            switch (c) {
                case 0:
                    l = k = !0;
                    b.append("<span></span><span></span><span></span><span></span><span></span><span></span>");
                    x = function (n, m) {
                        "undefined" === typeof this.zSize && (this.zSize = 400);
                        n = this.zSize;
                        m *= 40;
                        this.zSize += m;
                        60 > this.zSize || this.zSize > 1.5 * w ? this.zSize = n : (m /= 2, b.css({
                            height: this.zSize, width: this.zSize, left: parseInt(b.css("left") ||
                                0, 10) - m, top: parseInt(b.css("top") || 0, 10) - m
                        }))
                    };
                    break;
                case 1:
                    l = !0;
                    break;
                case 2:
                    l = !0;
                    break;
                case 3:
                    k = l = !0;
                    y = .008;
                    a && (b.append('<img src="' + (a.useRuler ? a.ruler : a.super) + '"/>'), a.useRuler || b.addClass("superpose"));
                    break;
                default:
                    return alert("Couldn't create the rule"), !1
            }
            b.draggable();
            k && b.zoomable({custom: x, step: y});
            b.mousedown(function (n) {
                3 == n.which && b.remove()
            });
            e.find("#img-rules").append(b);
            f.rulesCnt++;
            l && q(!1)
        }
    }, p = d("#img #img-el");
    p.draggable();
    p.zoomable();
    e.find("#img-rotate").rotateable({$target: p.find("> div")});
    const g = d("#toolbar");
    g.find(".add").click(function () {
        d(this).hasClass("add-indexruler") ? f.add(0) : d(this).hasClass("add-rulehorizontal") ? f.add(1) : d(this).hasClass("add-rulevertical") ? f.add(2) : d(this).hasClass("add-watch") ? g.toggleClass("model-select", !0) : d(this).hasClass("save") ? (h.addClass("saving"), html2canvas(e[0]).then(function (c) {
                c = c.toDataURL("image/png", 1).replace("image/png", "image/octet-stream");
                const a = document.createElement("a");
                a.download = "qc_" + v + ".png";
                a.href = c;
                a.click();
                h.removeClass("saving")
            })) :
            u.click()
    });
    u.change(function () {
        e.addClass("loading");
        const c = d(this).find("input")[0].files[0], a = new FileReader;
        a.onload = function (b) {
            p.find("> div").attr("style", "background-image:url(" + b.target.result + ")");
            e.addClass("has-img").removeClass("loading");
            v = c.name || "img";
            q(!0)
        };
        a.readAsDataURL(c)
    });
    g.find(".qcc").click(function () {
        d(this).toggleClass("complete")
    });
    t && (r = !1, h.find("#toolbar-toggle").click(function () {
        q(!r)
    }));
    g.find("#model-ruler-select .close").click(function () {
        g.toggleClass("model-select",
            !1)
    });
    g.find("#model-ruler-select .options > div[data-ruler][data-superpose]").click(function () {
        const c = d(this);
        0 === c.find("> .pick").length && (c.append('<div class="pick"><div class="ruler opt"><i class="mi">straighten</i>Ruler</div><div class="superpose opt"><i class="mi">filter_b_and_w</i>Image</div></div>'), c.find(".opt").click(function () {
            f.add(3, {
                ruler: "/res/rulers/models/" + c.attr("data-ruler"),
                super: "/res/rulers/models/" + c.attr("data-superpose"),
                useRuler: d(this).hasClass("ruler")
            })
        }), c.on("mouseleave",
            function () {
                c.find(".pick").remove();
                c.off("mouseleave")
            }))
    })
})(jQuery);
