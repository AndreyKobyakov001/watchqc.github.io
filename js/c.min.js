(function ($) {
    function hideSidebar(c) {
        if (!isDesktop) return !1;
        $main.toggleClass("tbar", c);
        r = c
    }

    const $main = $("#main"), panel = $main.find("#panel"), imgSel = panel.find("#img-sel label");
    let filename = "";
    const windowWidth = $(window).width(), isDesktop = 800 >= windowWidth;
    let r = !1;

    // Zoom images
    jQuery.fn.zoomable = function (c) {
        "undefined" === typeof c && (c = {});
        this.each(function () {
            const a = this;
            a.zoom = 1;
            a.minZoom = c.minZoom || 0.2;
            a.maxZoom = c.maxZoom || 10;
            a.zoomStep = c.step || 0.01;
            a.zoomFn = c.custom || function (b) {
                $(a).css({transform: "scale(" + b + ")"});
            };

            let initialDistance;

            $(a).on("wheel", function (event) {
                const delta = event.originalEvent.deltaY > 0 ? -1 : 1;
                a.zoom += a.zoomStep * delta;
                a.zoom = Math.min(Math.max(a.zoom, a.minZoom), a.maxZoom);
                a.zoomFn.apply(a, [a.zoom, delta]);
                event.preventDefault();
            });

            $(a).on("touchstart", function (event) {
                const touches = event.touches;
                if (touches.length === 2) {
                    initialDistance = Math.hypot(
                        touches[0].pageX - touches[1].pageX,
                        touches[0].pageY - touches[1].pageY
                    );
                }
            });

            $(a).on("touchmove", function (event) {
                const touches = event.touches;
                if (touches.length === 2) {
                    const currentDistance = Math.hypot(
                        touches[0].pageX - touches[1].pageX,
                        touches[0].pageY - touches[1].pageY
                    );

                    const delta = currentDistance - initialDistance;
                    const direction = delta > 0 ? 1 : -1;

                    a.zoom += a.zoomStep * direction;
                    a.zoom = Math.min(Math.max(a.zoom, a.minZoom), a.maxZoom);

                    a.zoomFn.apply(a, [a.zoom, direction]);

                    initialDistance = currentDistance;
                    event.preventDefault();
                }
            });
        });

        return this;
    };

    // Rotate images
    jQuery.fn.rotateable = function (params) {
        "undefined" === typeof params && (params = {});
        this.each(function () {
            const a = this;
            a.offset = null;
            a.dragging = !1;
            a.started = !1;
            a.$target = params.$target || $(a);

            let lastTouchY = 0;
            let lastTimestamp = 0;
            const sensitivity = isTouchDevice() ? 10 : 1; // Adjust the scaling factor for touch devices

            function rotateByDegrees(degrees) {
                const currentRotation = getCurrentRotation();
                const newRotation = currentRotation + degrees;
                a.$target.css({transform: "rotate(" + newRotation + "deg)"});
                $(a).css({transform: "rotate(" + newRotation + "deg)"});
            }

            function getCurrentRotation() {
                const matrix = new WebKitCSSMatrix(window.getComputedStyle(a).transform);
                return Math.round(Math.atan2(matrix.b, matrix.a) * (180 / Math.PI));
            }

            function isTouchDevice() {
                return 'ontouchstart' in window || navigator.maxTouchPoints;
            }

            $(a).on("touchstart", function (b) {
                b = b.originalEvent;
                a.offset = {x: b.changedTouches[0].pageX, y: b.changedTouches[0].pageY};
                lastTouchY = b.changedTouches[0].pageY;
                lastTimestamp = b.timeStamp;
            });

            $(a).on("touchmove", function (b) {
                b.preventDefault();
                b = b.originalEvent;

                const deltaY = b.changedTouches[0].pageY - lastTouchY;
                const deltaTimestamp = b.timeStamp - lastTimestamp;
                const speed = deltaY / deltaTimestamp * sensitivity;

                rotateByDegrees(speed);

                lastTouchY = b.changedTouches[0].pageY;
                lastTimestamp = b.timeStamp;
            }).on("mousedown", function (b) {
                a.dragging = !0;
                a.started = !0;
                a.offset = {x: b.pageX, y: b.pageY};
            });

            $(document).on("mouseup", function () {
                a.dragging = !1;
            }).on("mousemove", function (b) {
                if (a.started && a.dragging) {
                    rotateByDegrees(b.pageY - a.offset.y);
                    a.offset = {x: b.pageX, y: b.pageY};
                }
            });

            $(document).on("keydown", function (e) {
                if (!a.dragging) {
                    switch (e.keyCode) {
                        case 37: // Left arrow key
                            rotateByDegrees(-1);
                            break;
                        case 39: // Right arrow key
                            rotateByDegrees(1);
                            break;
                    }
                }
            });
        });

        return this;
    };

    const rules = {
        rulesCnt: 0, add: function (c, a) {
            const b = $('<div id="_r' + rules.rulesCnt + '" class="rule t' + c + '"></div>');
            let k = !1, x = null, l = !1, y = null;
            switch (c) {
                case 0:
                    l = k = !0;
                    b.append("<span></span><span></span><span></span><span></span><span></span><span></span>");
                    x = function (n, m) {
                        "undefined" === typeof this.zSize && (this.zSize = 400);
                        n = this.zSize;
                        m *= 40;
                        this.zSize += m;
                        60 > this.zSize || this.zSize > 1.5 * windowWidth ? this.zSize = n : (m /= 2, b.css({
                            height: this.zSize, width: this.zSize, left: parseInt(b.css("left") ||
                                0, 10) - m, top: parseInt(b.css("top") || 0, 10) - m
                        }))
                    };
                    break;
                case 1:
                    l = !0;
                    break;
                case 2:
                    l = !0;
                    break;
                case 3:
                    k = l = !0;
                    y = .008;
                    a && (b.append('<img src="' + (a.useRuler ? a.ruler : a.super) + '"/>'), a.useRuler || b.addClass("superpose"));
                    break;
                default:
                    return alert("Couldn't create the rule"), !1
            }
            b.draggable();
            k && b.zoomable({custom: x, step: y});
            b.mousedown(function (n) {
                3 == n.which && b.remove()
            });
            panel.find("#img-rules").append(b);
            rules.rulesCnt++;
            l && hideSidebar(!1)
        }
    }, $img = $("#img #img-el");

    $img.draggable();
    $img.zoomable();


    panel.find("#img-rotate").rotateable({$target: $img.find("> div")});
    const $toolbar = $("#toolbar");

    // Handling menu
    $toolbar.find(".add").click(function () {
        if ($(this).hasClass("add-indexruler")) {
            rules.add(0);
        } else if ($(this).hasClass("add-rulehorizontal")) {
            rules.add(1);
        } else if ($(this).hasClass("add-rulevertical")) {
            rules.add(2);
        } else if ($(this).hasClass("add-watch")) {
            $toolbar.toggleClass("model-select", true);
        } else if ($(this).hasClass("save")) {

            $main.addClass("saving")
            html2canvas(panel[0], {scale: 2}).then(function (dataUrl) {
                dataUrl = dataUrl.toDataURL("image/png", 1).replace("image/png", "image/octet-stream");
                const a = document.createElement("a");
                a.download = "qc_" + filename + ".png";
                a.href = dataUrl;
                a.click();
                $main.removeClass("saving")
            })
        } else {
            imgSel.click();
        }
    });

    imgSel.change(function () {
        panel.addClass("loading");
        const imgFile = $(this).find("input")[0].files[0], fileReader = new FileReader;
        fileReader.onload = function (b) {
            const img = new Image();
            img.src = b.target.result;
            img.onload = function () {

                const $imgDiv = $img.find("> div");
                $imgDiv.attr("id", "img-qc");

                $imgDiv.html(""); // Clear previous content
                $imgDiv.append(img);

                const imgWidth = img.width;
                const imgHeight = img.height;

                // Determine which side is longer
                if (imgWidth >= imgHeight) {
                    $imgDiv.find('img').css({
                        width: '100%',
                        height: 'auto',
                        position: 'absolute',
                        top: 0,
                        left: 0,
                    });
                } else {
                    $imgDiv.find('img').css({
                        width: 'auto',
                        height: '100%',
                        position: 'absolute',
                        top: 0,
                        left: 0,
                    });
                }

                panel.addClass("has-img").removeClass("loading");
                filename = imgFile.name || "img";
                hideSidebar(!0);
            };

        };
        fileReader.readAsDataURL(imgFile)
    });

    // Checklist
    $toolbar.find(".qcc").click(function () {
        $(this).toggleClass("complete")
    });
    isDesktop && (r = !1, $main.find("#toolbar-toggle").click(function () {
        hideSidebar(!r)
    }));
    $toolbar.find("#model-ruler-select .close").click(function () {
        $toolbar.toggleClass("model-select",
            !1)
    });
    $toolbar.find("#model-ruler-select .options > div[data-ruler][data-superpose]").click(function () {
        const $modelRuler = $(this);
        0 === $modelRuler.find("> .pick").length && ($modelRuler.append('<div class="pick"><div class="ruler opt"><i class="mi">straighten</i>Ruler</div><div class="superpose opt"><i class="mi">filter_b_and_w</i>Image</div></div>'), $modelRuler.find(".opt").click(function () {
            rules.add(3, {
                ruler: "/res/rulers/models/" + $modelRuler.attr("data-ruler"),
                super: "/res/rulers/models/" + $modelRuler.attr("data-superpose"),
                useRuler: $(this).hasClass("ruler")
            })
        }), $modelRuler.on("mouseleave",
            function () {
                $modelRuler.find(".pick").remove();
                $modelRuler.off("mouseleave")
            }))
    })
})(jQuery);
